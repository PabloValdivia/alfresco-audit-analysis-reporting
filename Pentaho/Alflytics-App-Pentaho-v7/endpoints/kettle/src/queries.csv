dbType;queryId;query
hsql;alfrescoIds;SELECT ID + '' AS "instanceId" FROM DWH_ALF_DIM_INSTANCES WHERE IS_ACTIVE='Y'
hsql;alfrescoServer;SELECT DESCRIPTION, LOGIN, PASSWORD, PROTOCOL + '://' + HOST + ':' + PORT AS BASE_URL, USER_LIMIT, AUDIT_LIMIT, NODE_LIMIT, WORKFLOW_LIMIT FROM DWH_ALF_DIM_INSTANCES WHERE ID = ${instanceId}\;
hsql;alfrescoClasses;SELECT C.ID+0 AS CLASS_ID,C.NAME+'' AS CLASS_NAME,C.IS_FILE+'' AS CLASS_IS_FILE,C.IS_FOLDER+'' AS CLASS_IS_FOLDER,C.IS_ASPECT+'' AS CLASS_IS_ASPECT,C.IS_ROOT+'' AS CLASS_IS_ROOT,C.OPE_TABLE_NAME+'' AS CLASS_OPE_TABLE_NAME,C.DWH_TABLE_NAME+'' AS CLASS_DWH_TABLE_NAME,C.ORDINAL,C.INSTANCE_ID,C.IS_ACTIVE+'' AS CLASS_IS_ACTIVE,P.ID,P.NAME,P.TYPE,P.IS_MULTIVALUE,P.OPE_TABLE_NAME,P.IS_OPE_INDEXED,P.DWH_TABLE_NAME,P.IS_DWH_INDEXED,P.JSON_PATH,P.FIELD_NAME,P.IS_ACTIVE FROM DWH_ALF_CLASSES AS C JOIN DWH_ALF_CLASS_PROPERTIES AS P ON P.CLASS_ID = C.ID WHERE C.INSTANCE_ID=${instanceId} AND C.IS_ACTIVE='Y' ORDER BY C.ORDINAL ASC, P.ID ASC\;
hsql;dataQualityLog;INSERT INTO DWH_DATA_QUALITY (SOURCE_TYPE,SOURCE_ID,BATCH_ID,ENTITIES,LAYER,VALUE) VALUES ('${sourceType}',${sourceId},'${batchId}','${entities}','${layer}',${counter})\;
hsql;stagingRepositoryTruncateCategories;DELETE FROM STG_ALF_CATEGORIES WHERE INSTANCE_ID=${instanceId}\;
hsql;stagingRepositoryTruncateNodes;DELETE FROM STG_ALF_NODES WHERE INSTANCE_ID=${instanceId}\;
hsql;stagingUsersTruncate;DELETE FROM STG_ALF_USERS WHERE INSTANCE_ID=${instanceId}\;
hsql;stagingCategoriesCount;SELECT COUNT(*) AS COUNTER FROM STG_ALF_CATEGORIES WHERE INSTANCE_ID=${sourceId}\;
hsql;stagingNodesCount;SELECT COUNT(*) AS COUNTER FROM STG_ALF_NODES WHERE INSTANCE_ID=${sourceId}\;
hsql;stagingUsersCount;SELECT COUNT(*) AS COUNTER FROM STG_ALF_USERS WHERE INSTANCE_ID=${sourceId}\;
hsql;operationalCategoriesCount;SELECT COUNT(*) AS COUNTER FROM OPE_ALF_CATEGORIES WHERE INSTANCE_ID=${sourceId}\;
hsql;operationalCategoriesNodes;SELECT INSTANCE_ID, IS_MODIFIED, ENTRY FROM STG_ALF_CATEGORIES WHERE INSTANCE_ID=${instanceId}\;
hsql;operationalCategoriesTruncate;DELETE FROM OPE_ALF_CATEGORIES WHERE INSTANCE_ID=${instanceId}\;
hsql;operationalRepositoryNodes;SELECT INSTANCE_ID, IS_MODIFIED, ENTRY FROM STG_ALF_NODES WHERE INSTANCE_ID=${instanceId}\;
hsql;operationalRepositoryCount;SELECT SUM(T.COUNTER) AS COUNTER FROM (SELECT COUNT(*) AS COUNTER FROM OPE_ALF_CONTENTS WHERE INSTANCE_ID=${sourceId} UNION ALL SELECT COUNT(*) AS COUNTER FROM OPE_ALF_FOLDERS WHERE INSTANCE_ID=${sourceId}) T\;
hsql;operationalUsersCount;SELECT COUNT(*) AS COUNTER FROM OPE_ALF_USERS WHERE INSTANCE_ID=${sourceId}\;
hsql;operationalUsersNodes;SELECT INSTANCE_ID, IS_MODIFIED, ENTRY FROM STG_ALF_USERS WHERE INSTANCE_ID=${instanceId}\;
hsql;operationalUsersTruncate;DELETE FROM OPE_ALF_USERS WHERE INSTANCE_ID=${instanceId}\;
hsql;warehouseCategoriesCount;SELECT COUNT(*) AS COUNTER FROM DWH_ALF_DIM_CATEGORIES WHERE INSTANCE_ID=${sourceId}\;
hsql;warehouseCategoriesDelete;DELETE FROM DWH_ALF_DIM_CATEGORIES DWH_CAT WHERE DWH_CAT.INSTANCE_ID=${instanceId} AND NOT EXISTS (SELECT 1 FROM OPE_ALF_CATEGORIES AS OPE_CAT WHERE OPE_CAT.INSTANCE_ID=DWH_CAT.INSTANCE_ID AND OPE_CAT.NODE_UUID=DWH_CAT.SRC_ID AND OPE_CAT.PARENT_NODE_UUID!='tag:tag-root')\;
hsql;warehouseCategoriesInsUpd;MERGE INTO DWH_ALF_DIM_CATEGORIES USING (SELECT COALESCE(ID,'Unknown') AS ALF_ID, COALESCE(EMAIL,'Unknown') AS EMAIL, COALESCE(FIRST_NAME,'Unknown') AS FIRST_NAME, COALESCE(LAST_NAME,'Unknown') AS LAST_NAME, COALESCE(ORGANIZATION,'Unknown') AS ORGANIZATION, COALESCE(IS_EMAIL_NOTIFICATIONS_ENABLED,FALSE) AS IS_EMAIL_NOTIFICATIONS_ENABLED, COALESCE(IS_ENABLED,TRUE) AS IS_ENABLED, DT_DELETED, INSTANCE_ID, ID AS SRC_ID FROM OPE_ALF_USERS WHERE INSTANCE_ID=${instanceId}) AS VALS(ALF_ID,EMAIL,FIRST_NAME,LAST_NAME,ORGANIZATION,IS_EMAIL_NOTIFICATIONS_ENABLED,IS_ENABLED,DT_DELETED,INSTANCE_ID,SRC_ID) ON DWH_ALF_DIM_USERS.INSTANCE_ID = VALS.INSTANCE_ID AND DWH_ALF_DIM_USERS.SRC_ID = VALS.SRC_ID WHEN MATCHED THEN UPDATE SET DWH_ALF_DIM_USERS.ALF_ID=VALS.ALF_ID,DWH_ALF_DIM_USERS.EMAIL=VALS.EMAIL,DWH_ALF_DIM_USERS.FIRST_NAME=VALS.FIRST_NAME,DWH_ALF_DIM_USERS.LAST_NAME=VALS.LAST_NAME,DWH_ALF_DIM_USERS.ORGANIZATION=VALS.ORGANIZATION,DWH_ALF_DIM_USERS.IS_EMAIL_NOTIFICATIONS_ENABLED=VALS.IS_EMAIL_NOTIFICATIONS_ENABLED,DWH_ALF_DIM_USERS.IS_ENABLED=VALS.IS_ENABLED,DWH_ALF_DIM_USERS.DT_DELETED=VALS.DT_DELETED,DWH_ALF_DIM_USERS.INSTANCE_ID=VALS.INSTANCE_ID,DWH_ALF_DIM_USERS.SRC_ID=VALS.SRC_ID WHEN NOT MATCHED THEN INSERT (ALF_ID,EMAIL,FIRST_NAME,LAST_NAME,ORGANIZATION,IS_EMAIL_NOTIFICATIONS_ENABLED,IS_ENABLED,DT_DELETED,INSTANCE_ID,SRC_ID) VALUES (VALS.ALF_ID,VALS.EMAIL,VALS.FIRST_NAME,VALS.LAST_NAME,VALS.ORGANIZATION,VALS.IS_EMAIL_NOTIFICATIONS_ENABLED,VALS.IS_ENABLED,VALS.DT_DELETED,VALS.INSTANCE_ID,VALS.SRC_ID)\;
hsql;warehouseCategoriesInsUpdUnknown;MERGE INTO DWH_ALF_DIM_CATEGORIES USING (SELECT -1 AS ID, 'Unknown' AS NODE_UUID, 'Unknown' AS NAME, {d '2001-01-01'} AS CREATED_AT, -1 AS CREATED_BY, {d '2001-01-01'} AS MODIFIED_AT, -1 AS MODIFIED_BY, -1 AS PARENT_ID, ${instanceId} AS INSTANCE_ID, 'UNKNOWN' AS SRC_ID FROM (VALUES(0))) AS VALS(ID,NODE_UUID,NAME,CREATED_AT,CREATED_BY,MODIFIED_AT,MODIFIED_BY,PARENT_ID,INSTANCE_ID,SRC_ID) ON DWH_ALF_DIM_CATEGORIES.INSTANCE_ID = VALS.INSTANCE_ID AND DWH_ALF_DIM_CATEGORIES.SRC_ID = VALS.SRC_ID WHEN MATCHED THEN UPDATE SET DWH_ALF_DIM_CATEGORIES.ID=VALS.ID,DWH_ALF_DIM_CATEGORIES.NODE_UUID=VALS.NODE_UUID,DWH_ALF_DIM_CATEGORIES.NAME=VALS.NAME,DWH_ALF_DIM_CATEGORIES.CREATED_AT=VALS.CREATED_AT,DWH_ALF_DIM_CATEGORIES.CREATED_BY=VALS.CREATED_BY,DWH_ALF_DIM_CATEGORIES.MODIFIED_AT=VALS.MODIFIED_AT,DWH_ALF_DIM_CATEGORIES.MODIFIED_BY=VALS.MODIFIED_BY,DWH_ALF_DIM_CATEGORIES.PARENT_ID=VALS.PARENT_ID,DWH_ALF_DIM_CATEGORIES.INSTANCE_ID=VALS.INSTANCE_ID,DWH_ALF_DIM_CATEGORIES.SRC_ID=VALS.SRC_ID WHEN NOT MATCHED THEN INSERT (ID,NODE_UUID,NAME,CREATED_AT,CREATED_BY,MODIFIED_AT,MODIFIED_BY,PARENT_ID,INSTANCE_ID,SRC_ID) VALUES VALS.ID,VALS.NODE_UUID,VALS.NAME,VALS.CREATED_AT,VALS.CREATED_BY,VALS.MODIFIED_AT,VALS.MODIFIED_BY,VALS.PARENT_ID,VALS.INSTANCE_ID,VALS.SRC_ID\;
hsql;warehouseRepositoryCount;SELECT SUM(T.COUNTER) AS COUNTER FROM (SELECT COUNT(*) AS COUNTER FROM DWH_ALF_DIM_CONTENTS WHERE INSTANCE_ID=${sourceId} UNION ALL SELECT COUNT(*) AS COUNTER FROM DWH_ALF_DIM_FOLDERS WHERE INSTANCE_ID=${sourceId}) T\;
hsql;warehouseRepositoryMinDt;SELECT '2005-01-01T00:00:00.000Z' AS DT FROM (VALUES(0))\;
hsql;warehouseRepositoryMaxDt;SELECT '2001-01-01T00:00:00.000Z' AS DT FROM (VALUES(0))\;
hsql;warehouseUsersCount;SELECT COUNT(*)-1  AS COUNTER FROM DWH_ALF_DIM_USERS WHERE INSTANCE_ID=${sourceId}\;
hsql;warehouseUsersDelete;UPDATE DWH_ALF_DIM_USERS SET DT_DELETED = CURRENT_DATE WHERE INSTANCE_ID=${instanceId} AND DT_DELETED IS NULL AND ALF_ID NOT IN (SELECT ALF_ID FROM OPE_ALF_USERS WHERE INSTANCE_ID=${instanceId})\;
hsql;warehouseUsersInsUpd;MERGE INTO DWH_ALF_DIM_USERS USING (SELECT COALESCE(ID,'Unknown') AS ALF_ID, COALESCE(EMAIL,'Unknown') AS EMAIL, COALESCE(FIRST_NAME,'Unknown') AS FIRST_NAME, COALESCE(LAST_NAME,'Unknown') AS LAST_NAME, COALESCE(ORGANIZATION,'Unknown') AS ORGANIZATION, COALESCE(IS_EMAIL_NOTIFICATIONS_ENABLED,FALSE) AS IS_EMAIL_NOTIFICATIONS_ENABLED, COALESCE(IS_ENABLED,TRUE) AS IS_ENABLED, DT_DELETED, INSTANCE_ID, ID AS SRC_ID FROM OPE_ALF_USERS WHERE INSTANCE_ID=${instanceId}) AS VALS(ALF_ID,EMAIL,FIRST_NAME,LAST_NAME,ORGANIZATION,IS_EMAIL_NOTIFICATIONS_ENABLED,IS_ENABLED,DT_DELETED,INSTANCE_ID,SRC_ID) ON DWH_ALF_DIM_USERS.INSTANCE_ID = VALS.INSTANCE_ID AND DWH_ALF_DIM_USERS.SRC_ID = VALS.SRC_ID WHEN MATCHED THEN UPDATE SET DWH_ALF_DIM_USERS.ALF_ID=VALS.ALF_ID,DWH_ALF_DIM_USERS.EMAIL=VALS.EMAIL,DWH_ALF_DIM_USERS.FIRST_NAME=VALS.FIRST_NAME,DWH_ALF_DIM_USERS.LAST_NAME=VALS.LAST_NAME,DWH_ALF_DIM_USERS.ORGANIZATION=VALS.ORGANIZATION,DWH_ALF_DIM_USERS.IS_EMAIL_NOTIFICATIONS_ENABLED=VALS.IS_EMAIL_NOTIFICATIONS_ENABLED,DWH_ALF_DIM_USERS.IS_ENABLED=VALS.IS_ENABLED,DWH_ALF_DIM_USERS.DT_DELETED=VALS.DT_DELETED,DWH_ALF_DIM_USERS.INSTANCE_ID=VALS.INSTANCE_ID,DWH_ALF_DIM_USERS.SRC_ID=VALS.SRC_ID WHEN NOT MATCHED THEN INSERT (ALF_ID,EMAIL,FIRST_NAME,LAST_NAME,ORGANIZATION,IS_EMAIL_NOTIFICATIONS_ENABLED,IS_ENABLED,DT_DELETED,INSTANCE_ID,SRC_ID) VALUES (VALS.ALF_ID,VALS.EMAIL,VALS.FIRST_NAME,VALS.LAST_NAME,VALS.ORGANIZATION,VALS.IS_EMAIL_NOTIFICATIONS_ENABLED,VALS.IS_ENABLED,VALS.DT_DELETED,VALS.INSTANCE_ID,VALS.SRC_ID)\;
hsql;warehouseUsersInsUpdUnknown;MERGE INTO DWH_ALF_DIM_USERS USING (SELECT -1 AS ID, 'Unknown' AS ALF_ID, 'Unknown' AS EMAIL, 'Unknown' AS FIRST_NAME, 'Unknown' AS LAST_NAME, 'Unknown' AS ORGANIZATION, FALSE AS IS_EMAIL_NOTIFICATIONS_ENABLED, FALSE AS IS_ENABLED, null AS DT_DELETED, ${instanceId} AS INSTANCE_ID, 'UNKNOWN' AS SRC_ID FROM (VALUES(0))) AS VALS(ID,ALF_ID,EMAIL,FIRST_NAME,LAST_NAME,ORGANIZATION,IS_EMAIL_NOTIFICATIONS_ENABLED,IS_ENABLED,DT_DELETED,INSTANCE_ID,SRC_ID) ON DWH_ALF_DIM_USERS.INSTANCE_ID = VALS.INSTANCE_ID AND DWH_ALF_DIM_USERS.SRC_ID = VALS.SRC_ID WHEN MATCHED THEN UPDATE SET DWH_ALF_DIM_USERS.ALF_ID=VALS.ALF_ID,DWH_ALF_DIM_USERS.EMAIL=VALS.EMAIL,DWH_ALF_DIM_USERS.FIRST_NAME=VALS.FIRST_NAME,DWH_ALF_DIM_USERS.LAST_NAME=VALS.LAST_NAME,DWH_ALF_DIM_USERS.ORGANIZATION=VALS.ORGANIZATION,DWH_ALF_DIM_USERS.IS_EMAIL_NOTIFICATIONS_ENABLED=VALS.IS_EMAIL_NOTIFICATIONS_ENABLED,DWH_ALF_DIM_USERS.IS_ENABLED=VALS.IS_ENABLED,DWH_ALF_DIM_USERS.DT_DELETED=VALS.DT_DELETED,DWH_ALF_DIM_USERS.INSTANCE_ID=VALS.INSTANCE_ID,DWH_ALF_DIM_USERS.SRC_ID=VALS.SRC_ID WHEN NOT MATCHED THEN INSERT (ID,ALF_ID,EMAIL,FIRST_NAME,LAST_NAME,ORGANIZATION,IS_EMAIL_NOTIFICATIONS_ENABLED,IS_ENABLED,DT_DELETED,INSTANCE_ID,SRC_ID) VALUES VALS.ID,VALS.ALF_ID,VALS.EMAIL,VALS.FIRST_NAME,VALS.LAST_NAME,VALS.ORGANIZATION,VALS.IS_EMAIL_NOTIFICATIONS_ENABLED,VALS.IS_ENABLED,VALS.DT_DELETED,VALS.INSTANCE_ID,VALS.SRC_ID\;

