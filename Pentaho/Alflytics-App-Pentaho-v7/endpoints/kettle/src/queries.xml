<queries>
<query dbType="hsql" queryId="alfrescoIds">SELECT ID + '' AS "instanceId" FROM DWH_ALF_DIM_INSTANCES WHERE IS_ACTIVE='Y'</query>
<query dbType="hsql" queryId="alfrescoServer">SELECT DESCRIPTION, LOGIN, PASSWORD, PROTOCOL + '://' + HOST + ':' + PORT AS BASE_URL, USER_LIMIT, AUDIT_LIMIT, NODE_LIMIT, WORKFLOW_LIMIT FROM DWH_ALF_DIM_INSTANCES WHERE ID = ${instanceId}</query>
<query dbType="hsql" queryId="alfrescoClasses">
 SELECT 
  C.ID+0 AS CLASS_ID,C.NAME+'' AS CLASS_NAME,C.IS_FILE+'' AS CLASS_IS_FILE,C.IS_FOLDER+'' AS CLASS_IS_FOLDER,C.IS_ASPECT+'' AS CLASS_IS_ASPECT,
  C.IS_ROOT+'' AS CLASS_IS_ROOT,C.OPE_TABLE_NAME+'' AS CLASS_OPE_TABLE_NAME,C.DWH_TABLE_NAME+'' AS CLASS_DWH_TABLE_NAME,C.ORDINAL,
  C.INSTANCE_ID,C.IS_ACTIVE+'' AS CLASS_IS_ACTIVE,P.ID,P.NAME,P.TYPE,P.IS_MULTIVALUE,P.OPE_TABLE_NAME,P.IS_OPE_INDEXED,P.DWH_TABLE_NAME,
  P.IS_DWH_INDEXED,P.JSON_PATH,P.FIELD_NAME,P.IS_ACTIVE
  FROM 
   DWH_ALF_CLASSES AS C 
   JOIN DWH_ALF_CLASS_PROPERTIES AS P ON P.CLASS_ID = C.ID WHERE C.INSTANCE_ID=${instanceId} AND C.IS_ACTIVE='Y' 
  ORDER BY
   C.ORDINAL ASC, P.ID ASC
</query>
<query dbType="hsql" queryId="dataQualityLog">INSERT INTO DWH_DATA_QUALITY (SOURCE_TYPE,SOURCE_ID,BATCH_ID,ENTITIES,LAYER,VALUE) VALUES ('${sourceType}',${sourceId},'${batchId}','${entities}','${layer}',${counter})</query>
<query dbType="hsql" queryId="stagingProcessesTruncateDeployments">DELETE FROM STG_ALF_WF_DEPLOYMENTS WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="stagingProcessesTruncateDefinitions">DELETE FROM STG_ALF_WF_DEFINITIONS WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="stagingProcessesTruncateInstances">DELETE FROM STG_ALF_WF_INSTANCES WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="stagingProcessesTruncateInstancesOpened">DELETE FROM STG_ALF_WF_INSTANCES_OPENED WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="stagingProcessesTruncateItems">DELETE FROM STG_ALF_WF_ITEMS WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="stagingProcessesTruncateTasks">DELETE FROM STG_ALF_WF_TASKS WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="stagingRepositoryTruncateCategories">DELETE FROM STG_ALF_CATEGORIES WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="stagingRepositoryTruncateNodes">DELETE FROM STG_ALF_NODES WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="stagingUsersTruncate">DELETE FROM STG_ALF_USERS WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="stagingCategoriesCount">SELECT COUNT(*) AS COUNTER FROM STG_ALF_CATEGORIES WHERE INSTANCE_ID=${sourceId}</query>
<query dbType="hsql" queryId="stagingNodesCount">SELECT COUNT(*) AS COUNTER FROM STG_ALF_NODES WHERE INSTANCE_ID=${sourceId}</query>
<query dbType="hsql" queryId="stagingUsersCount">SELECT COUNT(*) AS COUNTER FROM STG_ALF_USERS WHERE INSTANCE_ID=${sourceId}</query>
<query dbType="hsql" queryId="operationalCategoriesCount">SELECT COUNT(*) AS COUNTER FROM OPE_ALF_CATEGORIES WHERE INSTANCE_ID=${sourceId}</query>
<query dbType="hsql" queryId="operationalCategoriesNodes">SELECT INSTANCE_ID, IS_MODIFIED, ENTRY FROM STG_ALF_CATEGORIES WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="operationalCategoriesTruncate">DELETE FROM OPE_ALF_CATEGORIES WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="operationalRepositoryNodes">SELECT INSTANCE_ID, IS_MODIFIED, ENTRY FROM STG_ALF_NODES WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="operationalRepositoryCount">
 SELECT SUM(T.COUNTER) AS COUNTER
 FROM (
  SELECT COUNT(*) AS COUNTER FROM OPE_ALF_CONTENTS WHERE INSTANCE_ID=${sourceId} 
  UNION ALL 
  SELECT COUNT(*) AS COUNTER FROM OPE_ALF_FOLDERS WHERE INSTANCE_ID=${sourceId}
 ) T
</query>
<query dbType="hsql" queryId="operationalUsersCount">SELECT COUNT(*) AS COUNTER FROM OPE_ALF_USERS WHERE INSTANCE_ID=${sourceId}</query>
<query dbType="hsql" queryId="operationalUsersNodes">SELECT INSTANCE_ID, IS_MODIFIED, ENTRY FROM STG_ALF_USERS WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="operationalUsersTruncate">DELETE FROM OPE_ALF_USERS WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="operationalWfDefinitionsTruncate">DELETE FROM OPE_ALF_WF_DEFINITIONS WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="operationalWfDefinitions">SELECT INSTANCE_ID, IS_MODIFIED, ENTRY FROM STG_ALF_WF_DEFINITIONS WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="operationalWfDeploymentsTruncate">DELETE FROM OPE_ALF_WF_DEPLOYMENTS WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="operationalWfDeployments">SELECT INSTANCE_ID, IS_MODIFIED, ENTRY FROM STG_ALF_WF_DEPLOYMENTS WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="operationalWfInstancesTruncate">DELETE FROM OPE_ALF_WF_INSTANCES WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="operationalWfInstances">SELECT INSTANCE_ID, IS_MODIFIED, ENTRY FROM STG_ALF_WF_INSTANCES WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="operationalWfInstancesOpenedTruncate">DELETE FROM OPE_ALF_WF_INSTANCES_OPENED WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="operationalWfInstancesOpened">SELECT INSTANCE_ID, IS_MODIFIED, ENTRY FROM STG_ALF_WF_INSTANCES_OPENED WHERE INSTANCE_ID=${instanceId}</query>
<query dbType="hsql" queryId="warehouseCategoriesCount">
 SELECT SUM(COUNTER)+1 AS COUNTER
 FROM (
  SELECT COUNT(*)-1 AS COUNTER FROM DWH_ALF_DIM_CATEGORIES WHERE INSTANCE_ID=${sourceId}
  UNION ALL
  SELECT COUNT(*)-1 AS COUNTER FROM DWH_ALF_DIM_TAGS WHERE INSTANCE_ID=${sourceId}
 )
</query>
<query dbType="hsql" queryId="warehouseCategoriesDelete">
 DELETE FROM DWH_ALF_DIM_CATEGORIES
 WHERE
  DWH_ALF_DIM_CATEGORIES.INSTANCE_ID=${instanceId}
  AND DWH_ALF_DIM_CATEGORIES.SRC_ID!='UNKNOWN'
  AND NOT EXISTS (
   SELECT 1 
   FROM OPE_ALF_CATEGORIES 
   WHERE
    OPE_ALF_CATEGORIES.INSTANCE_ID=DWH_ALF_DIM_CATEGORIES.INSTANCE_ID 
    AND OPE_ALF_CATEGORIES.NODE_UUID=DWH_ALF_DIM_CATEGORIES.SRC_ID 
    AND OPE_ALF_CATEGORIES.PARENT_NODE_UUID!='tag:tag-root'
  )
</query>
<query dbType="hsql" queryId="warehouseCategoriesInsUpd">
MERGE INTO DWH_ALF_DIM_CATEGORIES USING (
 SELECT 
  COALESCE(NAME,'Unknown') AS NAME,COALESCE(TRUNC(CREATED_AT,'DD'),TO_DATE('2001-01-01','YYYY-MM-DD')) AS CREATED_AT,COALESCE(CREATOR.ID, -1) AS CREATED_BY,
  COALESCE(TRUNC(MODIFIED_AT,'DD'),TO_DATE('2001-01-01','YYYY-MM-DD')) AS MODIFIED_AT,COALESCE(MODIFIER.ID, -1) AS MODIFIED_BY,-1 AS PARENT_NODE_UUID,INSTANCE_ID,NODE_UUID AS SRC_ID 
 FROM
  OPE_ALF_CATEGORIES 
  LEFT JOIN DWH_ALF_DIM_USERS AS CREATOR ON OPE_ALF_CATEGORIES.INSTANCE_ID=CREATOR.INSTANCE_ID AND OPE_ALF_CATEGORIES.NODE_UUID=CREATOR.SRC_ID 
  LEFT JOIN DWH_ALF_DIM_USERS AS MODIFIER ON OPE_ALF_CATEGORIES.INSTANCE_ID=MODIFIER.INSTANCE_ID AND OPE_ALF_CATEGORIES.NODE_UUID=MODIFIER.SRC_ID 
 WHERE
  NODE_UUID!='tag:tag-root' 
  AND PARENT_NODE_UUID!='tag:tag-root'
  AND INSTANCE_ID=${instanceId}
) AS VALS(NAME,CREATED_AT,CREATED_BY,MODIFIED_AT,MODIFIED_BY,PARENT_ID,INSTANCE_ID,SRC_ID) 
ON DWH_ALF_DIM_CATEGORIES.INSTANCE_ID=VALS.INSTANCE_ID AND DWH_ALF_DIM_CATEGORIES.SRC_ID=VALS.SRC_ID
WHEN MATCHED THEN 
 UPDATE SET 
   DWH_ALF_DIM_CATEGORIES.NAME=VALS.NAME, DWH_ALF_DIM_CATEGORIES.CREATED_AT=VALS.CREATED_AT,
   DWH_ALF_DIM_CATEGORIES.CREATED_BY=VALS.CREATED_BY, DWH_ALF_DIM_CATEGORIES.MODIFIED_AT=VALS.MODIFIED_AT, DWH_ALF_DIM_CATEGORIES.MODIFIED_BY=VALS.MODIFIED_BY, 
   DWH_ALF_DIM_CATEGORIES.PARENT_ID=VALS.PARENT_ID, DWH_ALF_DIM_CATEGORIES.INSTANCE_ID=VALS.INSTANCE_ID, DWH_ALF_DIM_CATEGORIES.SRC_ID=VALS.SRC_ID 
WHEN NOT MATCHED THEN 
 INSERT (NAME,CREATED_AT,CREATED_BY,MODIFIED_AT,MODIFIED_BY,PARENT_ID,INSTANCE_ID,SRC_ID) 
 VALUES (VALS.NAME,VALS.CREATED_AT,VALS.CREATED_BY,VALS.MODIFIED_AT,VALS.MODIFIED_BY,VALS.PARENT_ID,VALS.INSTANCE_ID,VALS.SRC_ID)
</query>
<query dbType="hsql" queryId="warehouseCategoriesInsUpdUnknown">
MERGE INTO DWH_ALF_DIM_CATEGORIES USING (
 SELECT
  -1 AS ID, 'Unknown' AS NAME, {d '2001-01-01'} AS CREATED_AT, -1 AS CREATED_BY, {d '2001-01-01'} AS MODIFIED_AT, -1 AS MODIFIED_BY, -1 AS PARENT_ID, 
  ${instanceId} AS INSTANCE_ID, 'UNKNOWN' AS SRC_ID 
 FROM
  (VALUES(0))
) AS VALS(ID,NAME,CREATED_AT,CREATED_BY,MODIFIED_AT,MODIFIED_BY,PARENT_ID,INSTANCE_ID,SRC_ID) 
ON DWH_ALF_DIM_CATEGORIES.INSTANCE_ID = VALS.INSTANCE_ID AND DWH_ALF_DIM_CATEGORIES.SRC_ID = VALS.SRC_ID 
WHEN MATCHED THEN 
 UPDATE SET 
  DWH_ALF_DIM_CATEGORIES.ID=VALS.ID, DWH_ALF_DIM_CATEGORIES.NAME=VALS.NAME, 
  DWH_ALF_DIM_CATEGORIES.CREATED_AT=VALS.CREATED_AT, DWH_ALF_DIM_CATEGORIES.CREATED_BY=VALS.CREATED_BY, DWH_ALF_DIM_CATEGORIES.MODIFIED_AT=VALS.MODIFIED_AT, 
  DWH_ALF_DIM_CATEGORIES.MODIFIED_BY=VALS.MODIFIED_BY, DWH_ALF_DIM_CATEGORIES.PARENT_ID=VALS.PARENT_ID, DWH_ALF_DIM_CATEGORIES.INSTANCE_ID=VALS.INSTANCE_ID,
  DWH_ALF_DIM_CATEGORIES.SRC_ID=VALS.SRC_ID 
WHEN NOT MATCHED THEN 
 INSERT (ID,NAME,CREATED_AT,CREATED_BY,MODIFIED_AT,MODIFIED_BY,PARENT_ID,INSTANCE_ID,SRC_ID) 
 VALUES VALS.ID,VALS.NAME,VALS.CREATED_AT,VALS.CREATED_BY,VALS.MODIFIED_AT,VALS.MODIFIED_BY,VALS.PARENT_ID,VALS.INSTANCE_ID,VALS.SRC_ID
</query>
<query dbType="hsql" queryId="warehouseCategoriesUpdParent">
MERGE INTO DWH_ALF_DIM_CATEGORIES USING (
 SELECT DWH_ALF_DIM_CATEGORIES.ID AS PARENT_ID, OPE_ALF_CATEGORIES.INSTANCE_ID, OPE_ALF_CATEGORIES.NODE_UUID AS SRC_ID 
 FROM OPE_ALF_CATEGORIES JOIN DWH_ALF_DIM_CATEGORIES ON OPE_ALF_CATEGORIES.INSTANCE_ID=DWH_ALF_DIM_CATEGORIES.INSTANCE_ID AND OPE_ALF_CATEGORIES.PARENT_NODE_UUID=DWH_ALF_DIM_CATEGORIES.SRC_ID 
 WHERE OPE_ALF_CATEGORIES.NODE_UUID!='tag:tag-root' AND OPE_ALF_CATEGORIES.PARENT_NODE_UUID!='tag:tag-root' AND OPE_ALF_CATEGORIES.INSTANCE_ID=${instanceId}
) AS VALS(PARENT_ID,INSTANCE_ID,SRC_ID) ON DWH_ALF_DIM_CATEGORIES.INSTANCE_ID=VALS.INSTANCE_ID AND DWH_ALF_DIM_CATEGORIES.SRC_ID=VALS.SRC_ID 
WHEN MATCHED THEN UPDATE SET DWH_ALF_DIM_CATEGORIES.PARENT_ID=VALS.PARENT_ID
</query>
<query dbType="hsql" queryId="warehouseContentsAndFoldersInsUpdUnknown">
MERGE INTO DWH_ALF_DIM_FOLDERS USING (SELECT -1 AS ID,'Unknown' AS NAME,-1 AS NODE_TYPE_ID,{d '2001-01-01'} AS CREATED_DT,-1 AS CREATED_AT,-1 AS CREATED_BY_ID,{d '2001-01-01'} AS MODIFIED_DT,-1 AS MODIFIED_AT,-1 AS MODIFIED_BY_ID,-1 AS OWNER_ID,-1 AS PARENT_ID,${instanceId} AS INSTANCE_ID, 'UNKNOWN' AS SRC_ID FROM (VALUES(0))) AS VALS(ID,NAME,NODE_TYPE_ID,CREATED_DT,CREATED_AT,CREATED_BY_ID,MODIFIED_DT,MODIFIED_AT,MODIFIED_BY_ID,OWNER_ID,PARENT_ID,INSTANCE_ID,SRC_ID) ON DWH_ALF_DIM_FOLDERS.INSTANCE_ID=VALS.INSTANCE_ID AND DWH_ALF_DIM_FOLDERS.SRC_ID=VALS.SRC_ID WHEN MATCHED THEN UPDATE SET DWH_ALF_DIM_FOLDERS.ID=VALS.ID,DWH_ALF_DIM_FOLDERS.NAME=VALS.NAME,DWH_ALF_DIM_FOLDERS.NODE_TYPE_ID=VALS.NODE_TYPE_ID,DWH_ALF_DIM_FOLDERS.CREATED_DT=VALS.CREATED_DT,DWH_ALF_DIM_FOLDERS.CREATED_AT=VALS.CREATED_AT,DWH_ALF_DIM_FOLDERS.CREATED_BY_ID=VALS.CREATED_BY_ID,DWH_ALF_DIM_FOLDERS.MODIFIED_DT=VALS.MODIFIED_DT,DWH_ALF_DIM_FOLDERS.MODIFIED_AT=VALS.MODIFIED_AT,DWH_ALF_DIM_FOLDERS.MODIFIED_BY_ID=VALS.MODIFIED_BY_ID,DWH_ALF_DIM_FOLDERS.OWNER_ID=VALS.OWNER_ID,DWH_ALF_DIM_FOLDERS.PARENT_ID=VALS.PARENT_ID,DWH_ALF_DIM_FOLDERS.INSTANCE_ID=VALS.INSTANCE_ID,DWH_ALF_DIM_FOLDERS.SRC_ID=VALS.SRC_ID WHEN NOT MATCHED THEN INSERT (ID,NAME,NODE_TYPE_ID,CREATED_DT,CREATED_AT,CREATED_BY_ID,MODIFIED_DT,MODIFIED_AT,MODIFIED_BY_ID,OWNER_ID,PARENT_ID,INSTANCE_ID,SRC_ID) VALUES VALS.ID,VALS.NAME,VALS.NODE_TYPE_ID,VALS.CREATED_DT,VALS.CREATED_AT,VALS.CREATED_BY_ID,VALS.MODIFIED_DT,VALS.MODIFIED_AT,VALS.MODIFIED_BY_ID,VALS.OWNER_ID,VALS.PARENT_ID,VALS.INSTANCE_ID,VALS.SRC_ID; MERGE INTO DWH_ALF_DIM_CONTENTS USING (SELECT -1 AS ID,'Unknown' AS NAME,-1 AS NODE_TYPE_ID,-1 AS MIME_TYPE_ID,{d '2001-01-01'} AS CREATED_DT,-1 AS CREATED_AT,-1 AS CREATED_BY_ID,{d '2001-01-01'} AS MODIFIED_DT,-1 AS MODIFIED_AT,-1 AS MODIFIED_BY_ID,-1 AS OWNER_ID,0 AS SIZE_IN_BYTES,-1 AS PARENT_ID,${instanceId} AS INSTANCE_ID, 'UNKNOWN' AS SRC_ID FROM (VALUES(0))) AS VALS(ID,NAME,NODE_TYPE_ID,MIME_TYPE_ID,CREATED_DT,CREATED_AT,CREATED_BY_ID,MODIFIED_DT,MODIFIED_AT,MODIFIED_BY_ID,OWNER_ID,SIZE_IN_BYTES,PARENT_ID,INSTANCE_ID,SRC_ID) ON DWH_ALF_DIM_CONTENTS.INSTANCE_ID=VALS.INSTANCE_ID AND DWH_ALF_DIM_CONTENTS.SRC_ID=VALS.SRC_ID WHEN MATCHED THEN UPDATE SET DWH_ALF_DIM_CONTENTS.ID=VALS.ID,DWH_ALF_DIM_CONTENTS.NAME=VALS.NAME,DWH_ALF_DIM_CONTENTS.NODE_TYPE_ID=VALS.NODE_TYPE_ID,DWH_ALF_DIM_CONTENTS.MIME_TYPE_ID=VALS.MIME_TYPE_ID,DWH_ALF_DIM_CONTENTS.CREATED_DT=VALS.CREATED_DT,DWH_ALF_DIM_CONTENTS.CREATED_AT=VALS.CREATED_AT,DWH_ALF_DIM_CONTENTS.CREATED_BY_ID=VALS.CREATED_BY_ID,DWH_ALF_DIM_CONTENTS.MODIFIED_DT=VALS.MODIFIED_DT,DWH_ALF_DIM_CONTENTS.MODIFIED_AT=VALS.MODIFIED_AT,DWH_ALF_DIM_CONTENTS.MODIFIED_BY_ID=VALS.MODIFIED_BY_ID,DWH_ALF_DIM_CONTENTS.OWNER_ID=VALS.OWNER_ID,DWH_ALF_DIM_CONTENTS.SIZE_IN_BYTES=VALS.SIZE_IN_BYTES,DWH_ALF_DIM_CONTENTS.PARENT_ID=VALS.PARENT_ID,DWH_ALF_DIM_CONTENTS.INSTANCE_ID=VALS.INSTANCE_ID,DWH_ALF_DIM_CONTENTS.SRC_ID=VALS.SRC_ID  WHEN NOT MATCHED THEN INSERT (ID,NAME,NODE_TYPE_ID,MIME_TYPE_ID,CREATED_DT,CREATED_AT,CREATED_BY_ID,MODIFIED_DT,MODIFIED_AT,MODIFIED_BY_ID,OWNER_ID,SIZE_IN_BYTES,PARENT_ID,INSTANCE_ID,SRC_ID) VALUES VALS.ID,VALS.NAME,VALS.NODE_TYPE_ID,VALS.MIME_TYPE_ID,VALS.CREATED_DT,VALS.CREATED_AT,VALS.CREATED_BY_ID,VALS.MODIFIED_DT,VALS.MODIFIED_AT,VALS.MODIFIED_BY_ID,VALS.OWNER_ID,VALS.SIZE_IN_BYTES,VALS.PARENT_ID,VALS.INSTANCE_ID,VALS.SRC_ID;
</query>
<query dbType="hsql" queryId="warehouseContentCategoriesDelete">
DELETE FROM DWH_ALF_DIM_CONTENT_CATEGORIES
WHERE
 DWH_ALF_DIM_CONTENT_CATEGORIES.INSTANCE_ID=${instanceId}
 AND EXISTS (
  SELECT 1
  FROM
   OPE_ALF_CONTENTS
   INNER JOIN DWH_ALF_DIM_CONTENTS ON OPE_ALF_CONTENTS.INSTANCE_ID=DWH_ALF_DIM_CONTENTS.INSTANCE_ID AND OPE_ALF_CONTENTS.NODE_UUID=DWH_ALF_DIM_CONTENTS.SRC_ID
  WHERE
   OPE_ALF_CONTENTS.NAME IS NOT NULL
   AND DWH_ALF_DIM_CONTENTS.INSTANCE_ID=DWH_ALF_DIM_CONTENT_CATEGORIES.INSTANCE_ID
   AND DWH_ALF_DIM_CONTENTS.ID=DWH_ALF_DIM_CONTENT_CATEGORIES.CONTENT_ID)
</query>
<query dbType="hsql" queryId="warehouseContentCategoriesInsert">
INSERT INTO DWH_ALF_DIM_CONTENT_CATEGORIES
(CONTENT_ID, ORDINAL, CATEGORY_ID, INSTANCE_ID)
SELECT
 COALESCE(DWH_ALF_DIM_CONTENTS.ID,-1) AS CONTENT_ID,
 OPE_ALF_CONTENT_CATEGORIES.ORDINAL AS ORDINAL,
 COALESCE(DWH_ALF_DIM_CATEGORIES.ID,-1) AS CATEGORY_ID,
 OPE_ALF_CONTENT_CATEGORIES.INSTANCE_ID AS INSTANCE_ID
FROM
 OPE_ALF_CONTENT_CATEGORIES
 INNER JOIN DWH_ALF_DIM_CONTENTS ON OPE_ALF_CONTENT_CATEGORIES.INSTANCE_ID=DWH_ALF_DIM_CONTENTS.INSTANCE_ID AND OPE_ALF_CONTENT_CATEGORIES.NODE_UUID=DWH_ALF_DIM_CONTENTS.SRC_ID
 INNER JOIN DWH_ALF_DIM_CATEGORIES ON OPE_ALF_CONTENT_CATEGORIES.INSTANCE_ID=DWH_ALF_DIM_CATEGORIES.INSTANCE_ID AND OPE_ALF_CONTENT_CATEGORIES.CATEGORY_NODE_UUID=DWH_ALF_DIM_CATEGORIES.SRC_ID
WHERE
 OPE_ALF_CONTENT_CATEGORIES.INSTANCE_ID=${instanceId}
</query>
<query dbType="hsql" queryId="warehouseContentsDelete">
DELETE FROM DWH_ALF_DIM_CONTENTS 
WHERE
 DWH_ALF_DIM_CONTENTS.INSTANCE_ID=${instanceId}
 AND DWH_ALF_DIM_CONTENTS.SRC_ID!='UNKNOWN'
 AND NOT EXISTS (
  SELECT 1 
  FROM OPE_ALF_CONTENTS 
  WHERE
   OPE_ALF_CONTENTS.INSTANCE_ID=DWH_ALF_DIM_CONTENTS.INSTANCE_ID 
   AND OPE_ALF_CONTENTS.NODE_UUID=DWH_ALF_DIM_CONTENTS.SRC_ID) 
</query>
<query dbType="hsql" queryId="warehouseContentsInsUpd">
MERGE INTO DWH_ALF_DIM_CONTENTS USING (
 SELECT
  C.NAME AS NAME,COALESCE(NT.ID,-1) AS NODE_TYPE_ID,COALESCE(MT.ID,-1) AS MIME_TYPE_ID,COALESCE(CAST(C.CREATED_AT AS DATE),{d '2001-01-01'}) AS CREATED_DT,
  COALESCE(HOUR(C.CREATED_AT)*60 + MINUTE(C.CREATED_AT),-1) AS CREATED_AT,COALESCE(CU.ID,-1) AS CREATED_BY_ID,COALESCE(CAST(C.MODIFIED_AT AS DATE),{d '2001-01-01'}) AS MODIFIED_DT,
  COALESCE(HOUR(C.MODIFIED_AT)*60 + MINUTE(C.MODIFIED_AT),-1) AS MODIFIED_AT,COALESCE(MU.ID,-1) AS MODIFIED_BY_ID,COALESCE(OU.ID,-1) AS OWNER_ID, COALESCE(C.SIZE_IN_BYTES,0) AS SIZE_IN_BYTES, 
  -1 AS PARENT_ID, ${instanceId} AS INSTANCE_ID, C.NODE_UUID AS SRC_ID
 FROM
  OPE_ALF_CONTENTS C 
  LEFT JOIN DWH_ALF_DIM_NODE_TYPES NT ON NT.INSTANCE_ID=C.INSTANCE_ID AND NT.SRC_ID=C.NODE_TYPE 
  LEFT JOIN DWH_ALF_DIM_MIME_TYPES MT ON MT.INSTANCE_ID=C.INSTANCE_ID AND MT.SRC_ID=C.MIME_TYPE 
  LEFT JOIN DWH_ALF_DIM_USERS CU ON CU.INSTANCE_ID=C.INSTANCE_ID AND CU.SRC_ID=C.CREATED_BY 
  LEFT JOIN DWH_ALF_DIM_USERS MU ON MU.INSTANCE_ID=C.INSTANCE_ID AND MU.SRC_ID=C.MODIFIED_BY 
  LEFT JOIN DWH_ALF_DIM_USERS OU ON OU.INSTANCE_ID=C.INSTANCE_ID AND OU.SRC_ID=C.OWNER
 WHERE 
  NAME IS NOT NULL
) AS VALS(NAME,NODE_TYPE_ID,MIME_TYPE_ID,CREATED_DT,CREATED_AT,CREATED_BY_ID,MODIFIED_DT,MODIFIED_AT,MODIFIED_BY_ID,OWNER_ID,SIZE_IN_BYTES,PARENT_ID,INSTANCE_ID,SRC_ID)
 ON DWH_ALF_DIM_CONTENTS.INSTANCE_ID = VALS.INSTANCE_ID AND DWH_ALF_DIM_CONTENTS.SRC_ID = VALS.SRC_ID
WHEN MATCHED THEN 
 UPDATE SET 
  DWH_ALF_DIM_CONTENTS.NAME=VALS.NAME, DWH_ALF_DIM_CONTENTS.NODE_TYPE_ID=VALS.NODE_TYPE_ID, DWH_ALF_DIM_CONTENTS.MIME_TYPE_ID=VALS.MIME_TYPE_ID, 
  DWH_ALF_DIM_CONTENTS.CREATED_DT=VALS.CREATED_DT, DWH_ALF_DIM_CONTENTS.CREATED_AT=VALS.CREATED_AT, DWH_ALF_DIM_CONTENTS.CREATED_BY_ID=VALS.CREATED_BY_ID,
  DWH_ALF_DIM_CONTENTS.MODIFIED_DT=VALS.MODIFIED_DT, DWH_ALF_DIM_CONTENTS.MODIFIED_AT=VALS.MODIFIED_AT, DWH_ALF_DIM_CONTENTS.MODIFIED_BY_ID=VALS.MODIFIED_BY_ID,
  DWH_ALF_DIM_CONTENTS.OWNER_ID=VALS.OWNER_ID, DWH_ALF_DIM_CONTENTS.SIZE_IN_BYTES=VALS.SIZE_IN_BYTES, DWH_ALF_DIM_CONTENTS.PARENT_ID=VALS.PARENT_ID,
  DWH_ALF_DIM_CONTENTS.INSTANCE_ID=VALS.INSTANCE_ID, DWH_ALF_DIM_CONTENTS.SRC_ID=VALS.SRC_ID
WHEN NOT MATCHED THEN 
 INSERT (NAME,NODE_TYPE_ID,MIME_TYPE_ID,CREATED_DT,CREATED_AT,CREATED_BY_ID,MODIFIED_DT,MODIFIED_AT,MODIFIED_BY_ID,OWNER_ID,SIZE_IN_BYTES,PARENT_ID,INSTANCE_ID,SRC_ID) VALUES 
 VALS.NAME, VALS.NODE_TYPE_ID, VALS.MIME_TYPE_ID, VALS.CREATED_DT, VALS.CREATED_AT, VALS.CREATED_BY_ID,VALS.MODIFIED_DT, VALS.MODIFIED_AT,
 VALS.MODIFIED_BY_ID, VALS.OWNER_ID, VALS.SIZE_IN_BYTES, VALS.PARENT_ID, VALS.INSTANCE_ID, VALS.SRC_ID
</query>
<query dbType="hsql" queryId="warehouseContentsUpdParent">
MERGE INTO DWH_ALF_DIM_CONTENTS USING (
 SELECT
  DWH_ALF_DIM_CONTENTS.ID AS PARENT_ID, OPE_ALF_CONTENTS.INSTANCE_ID, OPE_ALF_CONTENTS.NODE_UUID AS SRC_ID 
 FROM 
  OPE_ALF_CONTENTS 
  JOIN DWH_ALF_DIM_CONTENTS ON OPE_ALF_CONTENTS.INSTANCE_ID=DWH_ALF_DIM_CONTENTS.INSTANCE_ID AND OPE_ALF_CONTENTS.PARENT_NODE_UUID=DWH_ALF_DIM_CONTENTS.SRC_ID 
 WHERE 
  OPE_ALF_CONTENTS.NAME IS NOT NULL 
  AND OPE_ALF_CONTENTS.INSTANCE_ID=${instanceId}
) AS VALS(PARENT_ID,INSTANCE_ID,SRC_ID) 
ON DWH_ALF_DIM_CONTENTS.INSTANCE_ID=VALS.INSTANCE_ID AND DWH_ALF_DIM_CONTENTS.SRC_ID=VALS.SRC_ID 
WHEN MATCHED THEN UPDATE SET DWH_ALF_DIM_CONTENTS.PARENT_ID=VALS.PARENT_ID
</query>
<query dbType="hsql" queryId="warehouseContentTagsDelete">
DELETE FROM DWH_ALF_DIM_CONTENT_TAGS
WHERE
 DWH_ALF_DIM_CONTENT_TAGS.INSTANCE_ID=${instanceId}
 AND EXISTS (
  SELECT 1
  FROM
   OPE_ALF_CONTENTS
   INNER JOIN DWH_ALF_DIM_CONTENTS ON OPE_ALF_CONTENTS.INSTANCE_ID=DWH_ALF_DIM_CONTENTS.INSTANCE_ID AND OPE_ALF_CONTENTS.NODE_UUID=DWH_ALF_DIM_CONTENTS.SRC_ID
  WHERE
   OPE_ALF_CONTENTS.NAME IS NOT NULL
   AND DWH_ALF_DIM_CONTENTS.INSTANCE_ID=DWH_ALF_DIM_CONTENT_TAGS.INSTANCE_ID
   AND DWH_ALF_DIM_CONTENTS.ID=DWH_ALF_DIM_CONTENT_TAGS.CONTENT_ID
 )
</query>
<query dbType="hsql" queryId="warehouseContentTagsInsert">
INSERT INTO DWH_ALF_DIM_CONTENT_TAGS
(CONTENT_ID, ORDINAL, TAG_ID, INSTANCE_ID)
SELECT
 COALESCE(DWH_ALF_DIM_CONTENTS.ID,-1) AS CONTENT_ID,
 OPE_ALF_CONTENT_TAGS.ORDINAL AS ORDINAL,
 COALESCE(DWH_ALF_DIM_TAGS.ID,-1) AS TAG_ID,
 OPE_ALF_CONTENT_TAGS.INSTANCE_ID AS INSTANCE_ID
FROM
 OPE_ALF_CONTENT_TAGS
 INNER JOIN DWH_ALF_DIM_CONTENTS ON OPE_ALF_CONTENT_TAGS.INSTANCE_ID=DWH_ALF_DIM_CONTENTS.INSTANCE_ID AND OPE_ALF_CONTENT_TAGS.NODE_UUID=DWH_ALF_DIM_CONTENTS.SRC_ID
 INNER JOIN DWH_ALF_DIM_TAGS ON OPE_ALF_CONTENT_TAGS.INSTANCE_ID=DWH_ALF_DIM_TAGS.INSTANCE_ID AND OPE_ALF_CONTENT_TAGS.TAG_NODE_UUID=DWH_ALF_DIM_TAGS.SRC_ID
WHERE
 OPE_ALF_CONTENT_TAGS.INSTANCE_ID=${instanceId}
</query>
<query dbType="hsql" queryId="warehouseFolderCategoriesDelete">
DELETE FROM DWH_ALF_DIM_FOLDER_CATEGORIES
WHERE
 DWH_ALF_DIM_FOLDER_CATEGORIES.INSTANCE_ID=${instanceId}
 AND EXISTS (
  SELECT 1
  FROM
   OPE_ALF_FOLDERS
   INNER JOIN DWH_ALF_DIM_FOLDERS ON OPE_ALF_FOLDERS.INSTANCE_ID=DWH_ALF_DIM_FOLDERS.INSTANCE_ID AND OPE_ALF_FOLDERS.NODE_UUID=DWH_ALF_DIM_FOLDERS.SRC_ID
  WHERE
   OPE_ALF_FOLDERS.NAME IS NOT NULL
   AND DWH_ALF_DIM_FOLDERS.INSTANCE_ID=DWH_ALF_DIM_FOLDER_CATEGORIES.INSTANCE_ID
   AND DWH_ALF_DIM_FOLDERS.ID=DWH_ALF_DIM_FOLDER_CATEGORIES.FOLDER_ID)
</query>
<query dbType="hsql" queryId="warehouseFolderCategoriesInsert">
INSERT INTO DWH_ALF_DIM_FOLDER_CATEGORIES
(FOLDER_ID, ORDINAL, CATEGORY_ID, INSTANCE_ID)
SELECT
 COALESCE(DWH_ALF_DIM_FOLDERS.ID,-1) AS FOLDER_ID,
 OPE_ALF_FOLDER_CATEGORIES.ORDINAL AS ORDINAL,
 COALESCE(DWH_ALF_DIM_CATEGORIES.ID,-1) AS CATEGORY_ID,
 OPE_ALF_FOLDER_CATEGORIES.INSTANCE_ID AS INSTANCE_ID
FROM
 OPE_ALF_FOLDER_CATEGORIES
 INNER JOIN DWH_ALF_DIM_FOLDERS ON OPE_ALF_FOLDER_CATEGORIES.INSTANCE_ID=DWH_ALF_DIM_FOLDERS.INSTANCE_ID AND OPE_ALF_FOLDER_CATEGORIES.NODE_UUID=DWH_ALF_DIM_FOLDERS.SRC_ID
 INNER JOIN DWH_ALF_DIM_CATEGORIES ON OPE_ALF_FOLDER_CATEGORIES.INSTANCE_ID=DWH_ALF_DIM_CATEGORIES.INSTANCE_ID AND OPE_ALF_FOLDER_CATEGORIES.CATEGORY_NODE_UUID=DWH_ALF_DIM_CATEGORIES.SRC_ID
WHERE
 OPE_ALF_FOLDER_CATEGORIES.INSTANCE_ID=${instanceId}
</query>
<query dbType="hsql" queryId="warehouseFoldersDelete">
DELETE FROM DWH_ALF_DIM_FOLDERS 
WHERE
 DWH_ALF_DIM_FOLDERS.INSTANCE_ID=${instanceId} 
 AND DWH_ALF_DIM_FOLDERS.SRC_ID!='UNKNOWN'
 AND NOT EXISTS (
  SELECT 1 
  FROM OPE_ALF_FOLDERS 
  WHERE 
   OPE_ALF_FOLDERS.INSTANCE_ID=DWH_ALF_DIM_FOLDERS.INSTANCE_ID 
   AND OPE_ALF_FOLDERS.NODE_UUID=DWH_ALF_DIM_FOLDERS.SRC_ID) 
</query>
<query dbType="hsql" queryId="warehouseFoldersInsUpd">
MERGE INTO DWH_ALF_DIM_FOLDERS USING (
 SELECT F.NAME AS NAME,COALESCE(NT.ID,-1) AS NODE_TYPE_ID,COALESCE(CAST(F.CREATED_AT AS DATE),{d '2001-01-01'}) AS CREATED_DT,COALESCE(HOUR(F.CREATED_AT)*60 + MINUTE(F.CREATED_AT),-1) AS CREATED_AT,COALESCE(CU.ID,-1) AS CREATED_BY_ID,COALESCE(CAST(F.MODIFIED_AT AS DATE),{d '2001-01-01'}) AS MODIFIED_DT,COALESCE(HOUR(F.MODIFIED_AT)*60 + MINUTE(F.MODIFIED_AT),-1) AS MODIFIED_AT,COALESCE(MU.ID,-1) AS MODIFIED_BY_ID,COALESCE(OU.ID,-1) AS OWNER_ID, -1 AS PARENT_ID, ${instanceId} AS INSTANCE_ID, F.NODE_UUID AS SRC_ID FROM OPE_ALF_FOLDERS F LEFT JOIN DWH_ALF_DIM_NODE_TYPES NT ON NT.INSTANCE_ID=F.INSTANCE_ID AND NT.SRC_ID=F.NODE_TYPE LEFT JOIN DWH_ALF_DIM_USERS CU ON CU.INSTANCE_ID=F.INSTANCE_ID AND CU.SRC_ID=F.CREATED_BY LEFT JOIN DWH_ALF_DIM_USERS MU ON MU.INSTANCE_ID=F.INSTANCE_ID AND MU.SRC_ID=F.MODIFIED_BY LEFT JOIN DWH_ALF_DIM_USERS OU ON OU.INSTANCE_ID=F.INSTANCE_ID AND OU.SRC_ID=F.OWNER WHERE NAME IS NOT NULL
) AS VALS(NAME,NODE_TYPE_ID,CREATED_DT,CREATED_AT,CREATED_BY_ID,MODIFIED_DT,MODIFIED_AT,MODIFIED_BY_ID,OWNER_ID,PARENT_ID,INSTANCE_ID,SRC_ID)
ON DWH_ALF_DIM_FOLDERS.INSTANCE_ID = VALS.INSTANCE_ID AND DWH_ALF_DIM_FOLDERS.SRC_ID = VALS.SRC_ID
WHEN MATCHED THEN 
 UPDATE SET
  DWH_ALF_DIM_FOLDERS.NAME=VALS.NAME, DWH_ALF_DIM_FOLDERS.NODE_TYPE_ID=VALS.NODE_TYPE_ID, DWH_ALF_DIM_FOLDERS.CREATED_DT=VALS.CREATED_DT,
  DWH_ALF_DIM_FOLDERS.CREATED_AT=VALS.CREATED_AT, DWH_ALF_DIM_FOLDERS.CREATED_BY_ID=VALS.CREATED_BY_ID, DWH_ALF_DIM_FOLDERS.MODIFIED_DT=VALS.MODIFIED_DT,
  DWH_ALF_DIM_FOLDERS.MODIFIED_AT=VALS.MODIFIED_AT, DWH_ALF_DIM_FOLDERS.MODIFIED_BY_ID=VALS.MODIFIED_BY_ID, DWH_ALF_DIM_FOLDERS.OWNER_ID=VALS.OWNER_ID,
  DWH_ALF_DIM_FOLDERS.PARENT_ID=VALS.PARENT_ID, DWH_ALF_DIM_FOLDERS.INSTANCE_ID=VALS.INSTANCE_ID, DWH_ALF_DIM_FOLDERS.SRC_ID=VALS.SRC_ID 
WHEN NOT MATCHED THEN 
 INSERT (NAME,NODE_TYPE_ID,CREATED_DT,CREATED_AT,CREATED_BY_ID,MODIFIED_DT,MODIFIED_AT,MODIFIED_BY_ID,OWNER_ID,PARENT_ID,INSTANCE_ID,SRC_ID) VALUES
  VALS.NAME, VALS.NODE_TYPE_ID, VALS.CREATED_DT, VALS.CREATED_AT, VALS.CREATED_BY_ID, VALS.MODIFIED_DT, VALS.MODIFIED_AT, VALS.MODIFIED_BY_ID, VALS.OWNER_ID, VALS.PARENT_ID, VALS.INSTANCE_ID, VALS.SRC_ID
</query>
<query dbType="hsql" queryId="warehouseFoldersUpdParent">
MERGE INTO DWH_ALF_DIM_FOLDERS USING (
 SELECT DWH_ALF_DIM_FOLDERS.ID AS PARENT_ID, OPE_ALF_FOLDERS.INSTANCE_ID, OPE_ALF_FOLDERS.NODE_UUID AS SRC_ID
 FROM 
  OPE_ALF_FOLDERS
  JOIN DWH_ALF_DIM_FOLDERS ON OPE_ALF_FOLDERS.INSTANCE_ID=DWH_ALF_DIM_FOLDERS.INSTANCE_ID AND OPE_ALF_FOLDERS.PARENT_NODE_UUID=DWH_ALF_DIM_FOLDERS.SRC_ID 
  WHERE OPE_ALF_FOLDERS.NAME IS NOT NULL AND OPE_ALF_FOLDERS.INSTANCE_ID=${instanceId}
) AS VALS(PARENT_ID,INSTANCE_ID,SRC_ID) ON DWH_ALF_DIM_FOLDERS.INSTANCE_ID=VALS.INSTANCE_ID AND DWH_ALF_DIM_FOLDERS.SRC_ID=VALS.SRC_ID 
WHEN MATCHED THEN UPDATE SET DWH_ALF_DIM_FOLDERS.PARENT_ID=VALS.PARENT_ID
</query>
<query dbType="hsql" queryId="warehouseFolderTagsDelete">
DELETE FROM DWH_ALF_DIM_FOLDER_TAGS
WHERE
 DWH_ALF_DIM_FOLDER_TAGS.INSTANCE_ID=${instanceId}
 AND EXISTS (
  SELECT 1
  FROM
   OPE_ALF_FOLDERS
   INNER JOIN DWH_ALF_DIM_FOLDERS ON OPE_ALF_FOLDERS.INSTANCE_ID=DWH_ALF_DIM_FOLDERS.INSTANCE_ID AND OPE_ALF_FOLDERS.NODE_UUID=DWH_ALF_DIM_FOLDERS.SRC_ID
  WHERE
   OPE_ALF_FOLDERS.NAME IS NOT NULL
   AND DWH_ALF_DIM_FOLDERS.INSTANCE_ID=DWH_ALF_DIM_FOLDER_TAGS.INSTANCE_ID
   AND DWH_ALF_DIM_FOLDERS.ID=DWH_ALF_DIM_FOLDER_TAGS.FOLDER_ID
 )
</query>
<query dbType="hsql" queryId="warehouseFolderTagsInsert">
INSERT INTO DWH_ALF_DIM_FOLDER_TAGS
(FOLDER_ID, ORDINAL, TAG_ID, INSTANCE_ID)
SELECT
 COALESCE(DWH_ALF_DIM_FOLDERS.ID,-1) AS FOLDER_ID,
 OPE_ALF_FOLDER_TAGS.ORDINAL AS ORDINAL,
 COALESCE(DWH_ALF_DIM_TAGS.ID,-1) AS TAG_ID,
 OPE_ALF_FOLDER_TAGS.INSTANCE_ID AS INSTANCE_ID
FROM
 OPE_ALF_FOLDER_TAGS
 INNER JOIN DWH_ALF_DIM_FOLDERS ON OPE_ALF_FOLDER_TAGS.INSTANCE_ID=DWH_ALF_DIM_FOLDERS.INSTANCE_ID AND OPE_ALF_FOLDER_TAGS.NODE_UUID=DWH_ALF_DIM_FOLDERS.SRC_ID
 INNER JOIN DWH_ALF_DIM_TAGS ON OPE_ALF_FOLDER_TAGS.INSTANCE_ID=DWH_ALF_DIM_TAGS.INSTANCE_ID AND OPE_ALF_FOLDER_TAGS.TAG_NODE_UUID=DWH_ALF_DIM_TAGS.SRC_ID
WHERE
 OPE_ALF_FOLDER_TAGS.INSTANCE_ID=${instanceId}
</query>
<query dbType="hsql" queryId="warehouseProcessesMaxDt">
SELECT COALESCE(null,'2001-01-01') + 'T00:00:00.000Z' AS DT FROM (VALUES(0))
</query>
<query dbType="hsql" queryId="warehouseRepositoryCount">
 SELECT SUM(T.COUNTER) AS COUNTER 
 FROM (
  SELECT COUNT(*)-1 AS COUNTER FROM DWH_ALF_DIM_CONTENTS WHERE INSTANCE_ID=${sourceId} 
  UNION ALL 
  SELECT COUNT(*)-1 AS COUNTER FROM DWH_ALF_DIM_FOLDERS WHERE INSTANCE_ID=${sourceId}) T
</query>
<query dbType="hsql" queryId="warehouseRepositoryMinDt">
SELECT COALESCE(TO_CHAR(MAX(DT),'YYYY-MM-DD'),'2001-01-01') + 'T00:00:00.000Z' AS DT FROM (
 SELECT MIN(MODIFIED_AT) AS DT FROM OPE_ALF_CONTENTS
 UNION ALL
 SELECT MIN(MODIFIED_AT) AS DT FROM OPE_ALF_FOLDERS)
</query>
<query dbType="hsql" queryId="warehouseRepositoryMaxDt">
SELECT COALESCE(TO_CHAR(MAX(DT),'YYYY-MM-DD'),'2001-01-01') + 'T00:00:00.000Z' AS DT FROM (
 SELECT MAX(CREATED_DT) AS DT FROM DWH_ALF_DIM_CONTENTS
 UNION ALL
 SELECT MAX(CREATED_DT) AS DT FROM DWH_ALF_DIM_FOLDERS)
</query>
<query dbType="hsql" queryId="warehouseTagsCount">SELECT COUNT(*)-1 AS COUNTER FROM DWH_ALF_DIM_TAGS WHERE INSTANCE_ID=${sourceId}</query>
<query dbType="hsql" queryId="warehouseTagsDelete">
 SELECT * 
 FROM DWH_ALF_DIM_TAGS 
 WHERE
  DWH_ALF_DIM_TAGS.INSTANCE_ID=${instanceId} 
  AND DWH_ALF_DIM_TAGS.ID!=-1 
  AND NOT EXISTS (
   SELECT 1 
   FROM OPE_ALF_CATEGORIES 
   WHERE 
    OPE_ALF_CATEGORIES.INSTANCE_ID=DWH_ALF_DIM_TAGS.INSTANCE_ID 
    AND OPE_ALF_CATEGORIES.NODE_UUID=DWH_ALF_DIM_TAGS.SRC_ID 
    AND OPE_ALF_CATEGORIES.PARENT_NODE_UUID='tag:tag-root')
</query>
<query dbType="hsql" queryId="warehouseTagsInsUpd">
MERGE INTO DWH_ALF_DIM_TAGS USING (
 SELECT COALESCE(NAME,'Unknown') AS NAME,COALESCE(TRUNC(CREATED_AT,'DD'),TO_DATE('2001-01-01','YYYY-MM-DD')) AS CREATED_AT,COALESCE(CREATOR.ID, -1) AS CREATED_BY,COALESCE(TRUNC(MODIFIED_AT,'DD'),TO_DATE('2001-01-01','YYYY-MM-DD')) AS MODIFIED_AT,COALESCE(MODIFIER.ID, -1) AS MODIFIED_BY,INSTANCE_ID,NODE_UUID AS SRC_ID 
 FROM 
  OPE_ALF_CATEGORIES 
  LEFT JOIN DWH_ALF_DIM_USERS AS CREATOR ON OPE_ALF_CATEGORIES.INSTANCE_ID=CREATOR.INSTANCE_ID AND OPE_ALF_CATEGORIES.NODE_UUID=CREATOR.SRC_ID 
  LEFT JOIN DWH_ALF_DIM_USERS AS MODIFIER ON OPE_ALF_CATEGORIES.INSTANCE_ID=MODIFIER.INSTANCE_ID AND OPE_ALF_CATEGORIES.NODE_UUID=MODIFIER.SRC_ID 
 WHERE PARENT_NODE_UUID='tag:tag-root' AND INSTANCE_ID=${instanceId}
) AS VALS(NAME,CREATED_AT,CREATED_BY,MODIFIED_AT,MODIFIED_BY,INSTANCE_ID,SRC_ID) 
ON DWH_ALF_DIM_TAGS.INSTANCE_ID=VALS.INSTANCE_ID AND DWH_ALF_DIM_TAGS.SRC_ID=VALS.SRC_ID
WHEN MATCHED THEN 
 UPDATE SET
  DWH_ALF_DIM_TAGS.NAME=VALS.NAME, DWH_ALF_DIM_TAGS.CREATED_AT=VALS.CREATED_AT, 
  DWH_ALF_DIM_TAGS.CREATED_BY=VALS.CREATED_BY, DWH_ALF_DIM_TAGS.MODIFIED_AT=VALS.MODIFIED_AT, DWH_ALF_DIM_TAGS.MODIFIED_BY=VALS.MODIFIED_BY, 
  DWH_ALF_DIM_TAGS.INSTANCE_ID=VALS.INSTANCE_ID, DWH_ALF_DIM_TAGS.SRC_ID=VALS.SRC_ID 
WHEN NOT MATCHED THEN 
 INSERT (NAME,CREATED_AT,CREATED_BY,MODIFIED_AT,MODIFIED_BY,INSTANCE_ID,SRC_ID) VALUES 
 (VALS.NAME, VALS.CREATED_AT, VALS.CREATED_BY, VALS.MODIFIED_AT, VALS.MODIFIED_BY, VALS.INSTANCE_ID, VALS.SRC_ID);
</query>
<query dbType="hsql" queryId="warehouseTagsInsUpdUnknown">
MERGE INTO DWH_ALF_DIM_TAGS USING (
  SELECT 
   -1 AS ID, 'Unknown' AS NAME, {d '2001-01-01'} AS CREATED_AT, -1 AS CREATED_BY, {d '2001-01-01'} AS MODIFIED_AT, 
   -1 AS MODIFIED_BY, ${instanceId} AS INSTANCE_ID, 'UNKNOWN' AS SRC_ID 
  FROM
   (VALUES(0))
) AS VALS(ID,NAME,CREATED_AT,CREATED_BY,MODIFIED_AT,MODIFIED_BY,INSTANCE_ID,SRC_ID) 
ON DWH_ALF_DIM_TAGS.INSTANCE_ID = VALS.INSTANCE_ID AND DWH_ALF_DIM_TAGS.SRC_ID = VALS.SRC_ID 
WHEN MATCHED THEN 
 UPDATE SET 
  DWH_ALF_DIM_TAGS.ID=VALS.ID, DWH_ALF_DIM_TAGS.NAME=VALS.NAME, DWH_ALF_DIM_TAGS.CREATED_AT=VALS.CREATED_AT, 
  DWH_ALF_DIM_TAGS.CREATED_BY=VALS.CREATED_BY, DWH_ALF_DIM_TAGS.MODIFIED_AT=VALS.MODIFIED_AT, DWH_ALF_DIM_TAGS.MODIFIED_BY=VALS.MODIFIED_BY, 
  DWH_ALF_DIM_TAGS.INSTANCE_ID=VALS.INSTANCE_ID, DWH_ALF_DIM_TAGS.SRC_ID=VALS.SRC_ID 
WHEN NOT MATCHED THEN 
 INSERT (ID,NAME,CREATED_AT,CREATED_BY,MODIFIED_AT,MODIFIED_BY,INSTANCE_ID,SRC_ID) VALUES 
 VALS.ID,VALS.NAME,VALS.CREATED_AT,VALS.CREATED_BY,VALS.MODIFIED_AT,VALS.MODIFIED_BY,VALS.INSTANCE_ID,VALS.SRC_ID;
</query>
<query dbType="hsql" queryId="warehouseNodeTypesInsUpd">
MERGE INTO DWH_ALF_DIM_NODE_TYPES USING (SELECT DISTINCT DESCRIPTION,INSTANCE_ID,SRC_ID FROM (SELECT DISTINCT NODE_TYPE AS DESCRIPTION,INSTANCE_ID,NODE_TYPE AS SRC_ID FROM OPE_ALF_CONTENTS WHERE INSTANCE_ID=${instanceId} UNION ALL SELECT DISTINCT NODE_TYPE AS DESCRIPTION,INSTANCE_ID,NODE_TYPE AS SRC_ID FROM OPE_ALF_FOLDERS WHERE INSTANCE_ID=${instanceId})) AS VALS(DESCRIPTION,INSTANCE_ID,SRC_ID) ON DWH_ALF_DIM_NODE_TYPES.INSTANCE_ID=VALS.INSTANCE_ID AND DWH_ALF_DIM_NODE_TYPES.SRC_ID=VALS.SRC_ID WHEN MATCHED THEN UPDATE SET DWH_ALF_DIM_NODE_TYPES.DESCRIPTION=VALS.DESCRIPTION,DWH_ALF_DIM_NODE_TYPES.INSTANCE_ID=VALS.INSTANCE_ID,DWH_ALF_DIM_NODE_TYPES.SRC_ID=VALS.SRC_ID WHEN NOT MATCHED THEN INSERT (DESCRIPTION,INSTANCE_ID,SRC_ID) VALUES (VALS.DESCRIPTION,VALS.INSTANCE_ID,VALS.SRC_ID);
</query>
<query dbType="hsql" queryId="warehouseNodeTypesInsUpdUnknown">
MERGE INTO DWH_ALF_DIM_NODE_TYPES USING (SELECT -1 AS ID, 'Unknown' AS DESCRIPTION, ${instanceId} AS INSTANCE_ID, 'UNKNOWN' AS SRC_ID FROM (VALUES(0))) AS VALS(ID,DESCRIPTION,INSTANCE_ID,SRC_ID) ON DWH_ALF_DIM_NODE_TYPES.INSTANCE_ID=VALS.INSTANCE_ID AND DWH_ALF_DIM_NODE_TYPES.SRC_ID=VALS.SRC_ID WHEN MATCHED THEN UPDATE SET DWH_ALF_DIM_NODE_TYPES.ID=VALS.ID,DWH_ALF_DIM_NODE_TYPES.DESCRIPTION=VALS.DESCRIPTION,DWH_ALF_DIM_NODE_TYPES.INSTANCE_ID=VALS.INSTANCE_ID,DWH_ALF_DIM_NODE_TYPES.SRC_ID=VALS.SRC_ID WHEN NOT MATCHED THEN INSERT (ID,DESCRIPTION,INSTANCE_ID,SRC_ID) VALUES VALS.ID,VALS.DESCRIPTION,VALS.INSTANCE_ID,VALS.SRC_ID;
</query>
<query dbType="hsql" queryId="warehouseMimeTypesInsUpd">
MERGE INTO DWH_ALF_DIM_MIME_TYPES USING (SELECT DISTINCT MIME_TYPE AS DESCRIPTION,INSTANCE_ID,MIME_TYPE AS SRC_ID FROM OPE_ALF_CONTENTS WHERE INSTANCE_ID=${instanceId} AND MIME_TYPE IS NOT NULL) AS VALS(DESCRIPTION,INSTANCE_ID,SRC_ID) ON DWH_ALF_DIM_MIME_TYPES.INSTANCE_ID=VALS.INSTANCE_ID AND DWH_ALF_DIM_MIME_TYPES.SRC_ID=VALS.SRC_ID WHEN MATCHED THEN UPDATE SET DWH_ALF_DIM_MIME_TYPES.DESCRIPTION=VALS.DESCRIPTION,DWH_ALF_DIM_MIME_TYPES.INSTANCE_ID=VALS.INSTANCE_ID,DWH_ALF_DIM_MIME_TYPES.SRC_ID=VALS.SRC_ID WHEN NOT MATCHED THEN INSERT (DESCRIPTION,INSTANCE_ID,SRC_ID) VALUES (VALS.DESCRIPTION,VALS.INSTANCE_ID,VALS.SRC_ID);
</query>
<query dbType="hsql" queryId="warehouseMimeTypesInsUpdUnknown">
MERGE INTO DWH_ALF_DIM_MIME_TYPES USING (SELECT -1 AS ID, 'Unknown' AS DESCRIPTION, ${instanceId} AS INSTANCE_ID, 'UNKNOWN' AS SRC_ID FROM (VALUES(0))) AS VALS(ID,DESCRIPTION,INSTANCE_ID,SRC_ID) ON DWH_ALF_DIM_MIME_TYPES.INSTANCE_ID=VALS.INSTANCE_ID AND DWH_ALF_DIM_MIME_TYPES.SRC_ID=VALS.SRC_ID WHEN MATCHED THEN UPDATE SET DWH_ALF_DIM_MIME_TYPES.ID=VALS.ID,DWH_ALF_DIM_MIME_TYPES.DESCRIPTION=VALS.DESCRIPTION,DWH_ALF_DIM_MIME_TYPES.INSTANCE_ID=VALS.INSTANCE_ID,DWH_ALF_DIM_MIME_TYPES.SRC_ID=VALS.SRC_ID WHEN NOT MATCHED THEN INSERT (ID,DESCRIPTION,INSTANCE_ID,SRC_ID) VALUES VALS.ID,VALS.DESCRIPTION,VALS.INSTANCE_ID,VALS.SRC_ID;
</query>
<query dbType="hsql" queryId="warehouseUsersCount">SELECT COUNT(*)-1  AS COUNTER FROM DWH_ALF_DIM_USERS WHERE INSTANCE_ID=${sourceId}</query>
<query dbType="hsql" queryId="warehouseUsersDelete">
UPDATE DWH_ALF_DIM_USERS 
 SET
  DT_DELETED = CURRENT_DATE 
 WHERE
  INSTANCE_ID=${instanceId} AND 
  DT_DELETED IS NULL 
  AND ALF_ID NOT IN (SELECT ALF_ID FROM OPE_ALF_USERS WHERE INSTANCE_ID=${instanceId})
</query>
<query dbType="hsql" queryId="warehouseUsersInsUpd">
MERGE INTO DWH_ALF_DIM_USERS USING (SELECT COALESCE(ID,'Unknown') AS ALF_ID, COALESCE(EMAIL,'Unknown') AS EMAIL, COALESCE(FIRST_NAME,'Unknown') AS FIRST_NAME, COALESCE(LAST_NAME,'Unknown') AS LAST_NAME, COALESCE(ORGANIZATION,'Unknown') AS ORGANIZATION, COALESCE(IS_EMAIL_NOTIFICATIONS_ENABLED,FALSE) AS IS_EMAIL_NOTIFICATIONS_ENABLED, COALESCE(IS_ENABLED,TRUE) AS IS_ENABLED, DT_DELETED, INSTANCE_ID, ID AS SRC_ID FROM OPE_ALF_USERS WHERE INSTANCE_ID=${instanceId}) AS VALS(ALF_ID,EMAIL,FIRST_NAME,LAST_NAME,ORGANIZATION,IS_EMAIL_NOTIFICATIONS_ENABLED,IS_ENABLED,DT_DELETED,INSTANCE_ID,SRC_ID) ON DWH_ALF_DIM_USERS.INSTANCE_ID = VALS.INSTANCE_ID AND DWH_ALF_DIM_USERS.SRC_ID = VALS.SRC_ID WHEN MATCHED THEN UPDATE SET DWH_ALF_DIM_USERS.ALF_ID=VALS.ALF_ID,DWH_ALF_DIM_USERS.EMAIL=VALS.EMAIL,DWH_ALF_DIM_USERS.FIRST_NAME=VALS.FIRST_NAME,DWH_ALF_DIM_USERS.LAST_NAME=VALS.LAST_NAME,DWH_ALF_DIM_USERS.ORGANIZATION=VALS.ORGANIZATION,DWH_ALF_DIM_USERS.IS_EMAIL_NOTIFICATIONS_ENABLED=VALS.IS_EMAIL_NOTIFICATIONS_ENABLED,DWH_ALF_DIM_USERS.IS_ENABLED=VALS.IS_ENABLED,DWH_ALF_DIM_USERS.DT_DELETED=VALS.DT_DELETED,DWH_ALF_DIM_USERS.INSTANCE_ID=VALS.INSTANCE_ID,DWH_ALF_DIM_USERS.SRC_ID=VALS.SRC_ID WHEN NOT MATCHED THEN INSERT (ALF_ID,EMAIL,FIRST_NAME,LAST_NAME,ORGANIZATION,IS_EMAIL_NOTIFICATIONS_ENABLED,IS_ENABLED,DT_DELETED,INSTANCE_ID,SRC_ID) VALUES (VALS.ALF_ID,VALS.EMAIL,VALS.FIRST_NAME,VALS.LAST_NAME,VALS.ORGANIZATION,VALS.IS_EMAIL_NOTIFICATIONS_ENABLED,VALS.IS_ENABLED,VALS.DT_DELETED,VALS.INSTANCE_ID,VALS.SRC_ID);
</query>
<query dbType="hsql" queryId="warehouseUsersInsUpdUnknown">
MERGE INTO DWH_ALF_DIM_USERS USING (SELECT -1 AS ID, 'Unknown' AS ALF_ID, 'Unknown' AS EMAIL, 'Unknown' AS FIRST_NAME, 'Unknown' AS LAST_NAME, 'Unknown' AS ORGANIZATION, FALSE AS IS_EMAIL_NOTIFICATIONS_ENABLED, FALSE AS IS_ENABLED, null AS DT_DELETED, ${instanceId} AS INSTANCE_ID, 'UNKNOWN' AS SRC_ID FROM (VALUES(0))) AS VALS(ID,ALF_ID,EMAIL,FIRST_NAME,LAST_NAME,ORGANIZATION,IS_EMAIL_NOTIFICATIONS_ENABLED,IS_ENABLED,DT_DELETED,INSTANCE_ID,SRC_ID) ON DWH_ALF_DIM_USERS.INSTANCE_ID = VALS.INSTANCE_ID AND DWH_ALF_DIM_USERS.SRC_ID = VALS.SRC_ID WHEN MATCHED THEN UPDATE SET DWH_ALF_DIM_USERS.ALF_ID=VALS.ALF_ID,DWH_ALF_DIM_USERS.EMAIL=VALS.EMAIL,DWH_ALF_DIM_USERS.FIRST_NAME=VALS.FIRST_NAME,DWH_ALF_DIM_USERS.LAST_NAME=VALS.LAST_NAME,DWH_ALF_DIM_USERS.ORGANIZATION=VALS.ORGANIZATION,DWH_ALF_DIM_USERS.IS_EMAIL_NOTIFICATIONS_ENABLED=VALS.IS_EMAIL_NOTIFICATIONS_ENABLED,DWH_ALF_DIM_USERS.IS_ENABLED=VALS.IS_ENABLED,DWH_ALF_DIM_USERS.DT_DELETED=VALS.DT_DELETED,DWH_ALF_DIM_USERS.INSTANCE_ID=VALS.INSTANCE_ID,DWH_ALF_DIM_USERS.SRC_ID=VALS.SRC_ID WHEN NOT MATCHED THEN INSERT (ID,ALF_ID,EMAIL,FIRST_NAME,LAST_NAME,ORGANIZATION,IS_EMAIL_NOTIFICATIONS_ENABLED,IS_ENABLED,DT_DELETED,INSTANCE_ID,SRC_ID) VALUES VALS.ID,VALS.ALF_ID,VALS.EMAIL,VALS.FIRST_NAME,VALS.LAST_NAME,VALS.ORGANIZATION,VALS.IS_EMAIL_NOTIFICATIONS_ENABLED,VALS.IS_ENABLED,VALS.DT_DELETED,VALS.INSTANCE_ID,VALS.SRC_ID;
</query>
</queries>

